" Vimrc file, http://phuzz.org

set nocompatible    " use vim defaults
set ls=2            " allways show status line
set tabstop=4       " numbers of spaces of tab character
set shiftwidth=4    " numbers of spaces to (auto)indent
set scrolloff=3     " keep 3 lines when scrolling
set showcmd         " display incomplete commands
set hlsearch        " highlight searches
set incsearch       " do incremental searching
set ruler           " show the cursor position all the time
set visualbell t_vb=    " turn off error beep/flash
set novisualbell    " turn off visual bell
set nobackup        " do not keep a backup file
set number          " show line numbers
set ignorecase      " ignore case when searching 
"set noignorecase   " don't ignore case
set title           " show title in console title bar
set ttyfast         " smoother changes
"set ttyscroll=0        " turn off scrolling, didn't work well with PuTTY
set modeline        " last lines in document sets vim mode
set modelines=3     " number lines checked for modelines
set shortmess=atI   " Abi:input;breviate messages
set nostartofline   " don't jump to first character when paging
set whichwrap=b,s,h,l,<,>,[,]   " move freely between files
"set viminfo='20,<50,s10,h
set autoindent     " always set autoindenting on
"set smartindent        " smart indent
set tw=79              "textwidth, That will automatically wrap text as close 
                       "to 79 characters as white space allows without 
                       "exceeding the 79 character limit. This option wraps at
                       "word boundaries.
set formatoptions+=t    "automatically wrap test at 79th characters.
set wrap linebreak nolist "soft wrap
"set cindent            " cindent
"set noautoindent
"set nosmartindent
"set nocindent
set autowrite      " auto saves changes when quitting and swiching buffer
set expandtab      " tabs are converted to spaces, use only when required
"set sm             " show matching braces, somewhat annoying...
"set nowrap         " don't wrap lines
syntax on           " syntax highlighing
filetype plugin indent on



if has("gui_running")
" See ~/.gvimrc
set guifont=Monospace\ 10  " use this font 
set lines=50       " height = 50 lines
set columns=100        " width = 100 columns
set background=light   " adapt colors for background
set selectmode=mouse,key,cmd
set keymodel=
else
colorscheme elflord    " use this color scheme
set background=dark        " adapt colors for background
endif

if has("autocmd")
" Restore cursor position
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" Filetypes (au = autocmd)
au FileType helpfile set nonumber      " no line numbers when viewing help
au FileType helpfile nnoremap <buffer><cr> <c-]>   " Enter selects subject
au FileType helpfile nnoremap <buffer><bs> <c-T>   " Backspace to go back

" When using mutt, text width=72
" au FileType mail,tex set textwidth=80
au FileType cpp,c,java,sh,py,php,html,h set autoindent 
au FileType tex setlocal spell spelllang=en_us
au FileType py set noexpandtab
" address code paste in terminal
nnoremap <C-p> :set invpaste paste?<CR>
set pastetoggle=<C-p>
set showmode
"au FileType cpp,c,java,sh,pl,php,phtml,asp  set cindent
"au BufRead mutt*[0-9] set tw=72

"Automatically chmod +x Shell and Perl scripts
"au BufWritePost   *.sh             !chmod +x %
"au BufWritePost   *.pl             !chmod +x %

" File formats
au BufNewFile,BufRead  *.phtml  set syntax=php
au BufNewFile,BufRead  *.pls    set syntax=dosini
au BufNewFile,BufRead  modprobe.conf    set syntax=modconf

" Ctrl+X O
autocmd BufNewFile,BufRead *.c set formatprg=astyle\ -T4pb
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType php noremap <C-L> :!php -l %<CR>
autocmd Filetype html,xml,xsl source ~/.vim/closetag.vim
endif



" Save and make current file.o
function! Make()
    let curr_dir = expand('%:h')
    if curr_dir == ''
    let curr_dir = '.'
    endif
    echo curr_dir
    execute 'lcd ' . curr_dir
    execute 'make %:r.o'
    execute 'lcd -'
endfunction

if exists('+colorcolumn')
    set colorcolumn=80
else
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif
"----------------------------cscopeconfiguration------------------------
if has("cscope")
    set csprg=/usr/bin/cscope
    set csto=0
    set cst
    set csverb
    " C symbol
    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    " definition
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    " functions that called by this function
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
    " funtions that calling this function
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    " test string
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    " egrep pattern
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    " file
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    " files #including this file
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>

    " Automatically make cscope connections
    function! LoadCscope()
        let db = findfile("cscope.out", ".;")
        if (!empty(db))
            let path = strpart(db, 0, match(db, "/cscope.out$"))
            set nocscopeverbose " suppress 'duplicate connection' error
            exe "cs add " . db . " " . path
            set cscopeverbose
        endif
    endfunction
    au BufEnter /* call LoadCscope()

endif
"-----------------------Keyboard mapping setting------------------------
"{cmd} {attr} {lhs} {rhs}
"
"example:
"  map <F2> :echo 'Current time is ' . strftime('%c')<CR>
"  map! <F3> a<C-R>=strftime('%c')<CR><Esc>
"  nnoremap <silent> <F2> :lchdir %:p:h<CR>:pwd<CR>
"
"where
"{cmd}  is one of ':map', ':map!', ':nmap', ':vmap', ':imap',
"':cmap', ':smap', ':xmap', ':omap', ':lmap', etc.
"{attr} is optional and one or more of the following: <buffer>, <silent>,
"<expr> <script>, <unique> and <special>.
"More than one attribute can be specified to a map.
"{lhs}  left hand side, is a sequence of one or more keys
"that are being
"mapped.
"{rhs}  right hand side, is the sequence of keys that
"the {lhs} keys are
"mapped to.


"nmap - Display normal mode maps
"imap - Display insert mode maps
"vmap - Display visual and select mode maps
"smap - Display select mode maps
"xmap - Display visual mode maps
"cmap - Display command-line mode maps
"omap - Display operator pending mode maps
"
"Removing map: :unmap <F8> or :unmap! <F8>
"
"Key notation:
"
"Ctrl-KEY  -> <C-KEY>
"Shit-KEY  -> <S-KEY>
"Super-KEY -> <D-KEY>
"Ctrl-I    -> TAB
"Ctrl-[    -> ESC
"Ctrl-M    -> Enter
"Ctrl-H    -> Backspace <BS>
"Enter     -> <CR>
"
"---------------------------Map attributes------------------------------------
"<buffer> <silent>, <special>, <script>, <expr>, and <unique>
"example:
"
":nnoremap <silent> <F2> :lchdir %:p:h<CR>:pwd<CR>
"<silent> : disble the visiblility of command execution 
"
"<expr> : map command to invoke a Vim function and use the returned value as the
"key sequence to execute
"


"Tlist plugin mapping
"nnoremap <F7> :update<CR>:call Make()<CR>
nnoremap <silent> <F8> :TlistToggle<CR>
set tags=tags,./../tags,./../tags,./../../tags,./../../../tags,./../../../../tags,./../../../../../tags,./../../../../../../tags,./../../../../../../../tags,./../../../../../../../../tags
"tlist with latex
let tlist_tex_settings   = 'latex;i:input;s:sections;g:graphic+listing;l:label;r:ref'
let tlist_make_settings  = 'make;m:makros;t:targets'
"latex suite

" Keyboard mappings
map <F1> :previous<CR>  " map F1 to open previous buffer
map <F2> :next<CR>      " map F2 to open next buffer
map <silent> <C-N> :silent noh<CR> " turn off highlighted search
"map ,v :sp ~/.vimrc<cr> " edit my .vimrc file in a split
"map ,e :e ~/.vimrc<cr>      " edit my .vimrc file
"map ,u :source ~/.vimrc<cr> " update the system settings from my vimrc file
"----- write out html file
"map ,h :source $VIM/vim70/syntax/2html.vim<cr>:w<cr>:clo<cr>

" Open and close all the three plugins on the same time
nmap <C-F7> :TrinityToggleAll<CR>
" Open and close the srcexpl.vim separately
nmap <C-F9> :TrinityToggleSourceExplorer<CR>
" Open and close the taglist.vim separately
nmap <C-F10> :TrinityToggleTagList<CR>
" Open and close the NERD_tree.vim separately
nmap <C-F11> :TrinityToggleNERDTree<CR>

" Common command line typos
"cmap W w
"cmap Q q

"eclim configurations
let g:EclimCompletionMethod = 'omnifunc'
let g:EclimJavaSearchSingleResult = 'vsplit'
let g:EclimProjectTreeActions = [
    \ {'pattern': '.*', 'name': 'Vertical Split', 'action': 'vsplit'},
    \ {'pattern': '.*', 'name': 'Split', 'action': 'vsplit'},
    \ {'pattern': '.*', 'name': 'Tab', 'action': 'vsplit'},
    \ {'pattern': '.*', 'name': 'Edit', 'action': 'vsplit'},
  \ ]
" Keyboard mapping for numeric keypad
imap <Esc>OM <c-m>
map <Esc>OM <c-m>
imap <Esc>OP <nop>
map <Esc>OP <nop>
imap <Esc>OQ /
map <Esc>OQ /
imap <Esc>OR *
map <Esc>OR *
imap <Esc>OS -
map <Esc>OS -

imap <Esc>Ol +
imap <Esc>Om -
imap <Esc>On ,
imap <Esc>Op 0
imap <Esc>Oq 1
imap <Esc>Or 2
imap <Esc>Os 3
imap <Esc>Ot 4
imap <Esc>Ou 5
imap <Esc>Ov 6
imap <Esc>Ow 7
imap <Esc>Ox 8
imap <Esc>Oy 9
imap <Esc>Oz 0


set runtimepath^=~/.vim/bundle/ctrlp.vim
set runtimepath^=~/.vim/bundle/lightline.vim
